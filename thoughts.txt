Running FastDownward on Rovers Potassco instances creates trajectories which are too large for FAMA
Tried trimming them artificially to <= 20K (using `truncate`)
Resulted in trajectories with only a few (~ 3) states
FAMA evaluation used random walks to generate trajectories with up to 10 states
Unclear what initial state was used to generate these - could mail authors to find out
Could directly reuse FAMA trajectories to generate action models an re-run evaluation - would have verification for precision and recall metrics as well
Questionable novelty of study
Trajectories of ~1MB are simply not handled by FAMA - crashes with memory exceeded
Not viable when scaling up - might want to use Aaron's algorithm or implement a simple search-based procedure
What is the predicate space for some domain?
Every predicate with every permutation of the same type when a predicate has args of the same type
Or given an action with args of some type - every predicate with args of type which are a subset of action args - includes permutations
Mailed FAMA authors regarding dataset preparation
Tips from them included how to increase Madagascar memory limit and some obscure ways to reduce trajectory size
Could try to design a Sokoban domain with lesser size
Could also use a smaller initial state to generate trajectories randomly - have asked follow-up questions to the authors to clarify the "random" walk procedure
Could try adjusting the Madagascar memory limit and trying with the existing trajectories - was still taking a lot of time before I stopped the search though
(2020-04-28) Rebuilt codebase (excluding evaluation code), need to test it with a smaller trajectory to ensure pipeline works
Which domain + problem to use though? Could use FAMA dataset itself
No problem file in the FAMA dataset, just trajectories
Use Aaron's instances?
Even Aaron's instances proving too big to work, segfault and no solution
One action and 2 states (init + subsequent) worked
Might want to use trajectory init states and rover domain to do tests
Need to write evaluation code to evaluate an action model with reference action model
Need to write trajectory generator starting from initial state if using random walk method
Need to start work on paper
General thread of paper is as follows -
- Key contribution
  - idea of using action models as player models (needs argument in favour of rule-based models)
  - application of AML algorithms (FAMA) to learn the player models from interaction logs
  - demonstration of functionality via a method to quantify user skill 
  - potential application of other paper to generate levels based on this
- Limitations
  - No theoretical or psychological basis for why learned action models should correlate with human mental model (could augment AML to incorporate this)
  - No empirical analysis/study of whether predictions match actual skill level in playtesters
  - Usage of individual domain actions as "skills" is not useful since we might want to test acquisition of higher-order skills which combine actions
  - Practical limitations to size of trajectories that can be used (in state space and length)i
  - Not all games can be represented in PDDL, theoretically or practically (could include turn-based games (e.g. Pokemon series, Chrono Trigger), tile-based board and puzzle games (Catan, Baba is You)
Classification according to Smith et. al.'s taxonomy - Individual, Generative + Descriptive, Game Actions, Induced (novel addition to taxonomy)
Why rule-based models?
- feedback regarding player skill might be psychologically harmful to players (needs transparency and auditability)
- easily generalizable to any domain which can be modeled in FO-logic
- rich body of existing work in learning rule-based models (AML)

For now -
3. Experiment with using Aaron's code for AML and evaluate it
4. Attempt to generate longer trajectories with lesser file size for Sokoban
6. Continue writing paper with current dataset
7. Find small Sokoban instance to try generating a trajectory with
8. Write 2 small levels which can be used with the IPC Sokoban domain to learn an action model (using both trajectories)
9. Write a converter which can turn a Sokoban level representation into a PDDL problem file for use with the IPC Sokoban domain
